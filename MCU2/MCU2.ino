#include <homephone.h>
//homephone lcd(A4, A2, A3, A1, A5);
homephone lcd(A2, A4, A3, A5, A1);//2 4 3 5 1 

String inputString = "";
boolean stringComplete = false;
String cpuTemp, cpuLoad, gpuRam, gpuLoad, Ram, Nw;
int ind1, ind2, ind3, ind4, ind5;

const uint8_t _logo[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x18, 0xE0, 0x0E, 0x38, 0x03, 0xF8, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x1C, 0xE0, 0x0E, 0x38, 0x03, 0xF8, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x0C, 0x40, 0x04, 0x10, 0x02, 0x48, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x0C, 0x40, 0x04, 0x30, 0x02, 0x48, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x0A, 0x40, 0x06, 0x20, 0x02, 0x48, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xCF, 0xFF, 0xFF, 0x80, 0x00, 0x0A, 0x40, 0x02, 0x20, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xCF, 0xFF, 0xFF, 0x80, 0x00, 0x0B, 0x40, 0x02, 0x20, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xCF, 0xFF, 0xFF, 0x80, 0x00, 0x09, 0x40, 0x02, 0x40, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0x87, 0xFF, 0xFF, 0x80, 0x00, 0x09, 0xC0, 0x01, 0x40, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0x87, 0xFF, 0xFF, 0x80, 0x00, 0x08, 0xC0, 0x01, 0x40, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x08, 0xC0, 0x01, 0xC0, 0x00, 0x40, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x18, 0x40, 0x01, 0x80, 0x00, 0x60, 0x00, 0x00,
0x00, 0x0F, 0xFE, 0x31, 0xFF, 0xFF, 0x80, 0x00, 0x1C, 0x40, 0x00, 0x80, 0x01, 0xF0, 0x00, 0x00,
0x00, 0x0F, 0xFE, 0x31, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFE, 0x71, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x08, 0x00, 0x78, 0xF8, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x08, 0x00, 0x78, 0xF0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFC, 0x71, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFC, 0x63, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFE, 0x23, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFE, 0x23, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0F, 0xFF, 0xFE, 0x07, 0xFF, 0x80, 0x0F, 0x00, 0x03, 0x80, 0x00, 0xC0, 0x01, 0xF8, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0x07, 0xFF, 0x80, 0x09, 0x80, 0x06, 0x40, 0x03, 0xC0, 0x01, 0x08, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0x0F, 0xFF, 0x80, 0x18, 0x80, 0x04, 0x40, 0x00, 0xC0, 0x01, 0x08, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0x8F, 0xFF, 0x80, 0x10, 0x80, 0x04, 0x60, 0x00, 0xC0, 0x00, 0x08, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0x9F, 0xFF, 0x80, 0x00, 0x80, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x18, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xDF, 0xFF, 0x80, 0x00, 0x80, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x10, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x00, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x10, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x03, 0x00, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x10, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x02, 0x00, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x10, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x04, 0x00, 0x04, 0x20, 0x00, 0xC0, 0x00, 0x30, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x08, 0x00, 0x04, 0x60, 0x00, 0xC0, 0x00, 0x20, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x18, 0x00, 0x04, 0x40, 0x00, 0xC0, 0x00, 0x20, 0x00,
0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x1F, 0x80, 0x02, 0xC0, 0x03, 0xF0, 0x00, 0x20, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x03, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const uint8_t _gpu[] PROGMEM = {
0x7F, 0xFE, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xBF, 0xD5, 0xA3, 0x55, 0xA3, 0x55,
0xA7, 0xD5, 0xA7, 0x15, 0xBF, 0x1D, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x7F, 0xFE, 
};

const uint8_t _ram[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0x60, 0x01,
0xA6, 0xE0, 0x00, 0x37, 0xE0, 0x00, 0x07, 0x3F, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x87, 0x99, 0xE1,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const uint8_t _cpu[] PROGMEM = {
0x00, 0x00, 0x00, 0x19, 0x99, 0x98, 0x1F, 0xFF, 0xF8, 0xF0, 0x00, 0x0F, 0xEF, 0xFF, 0xF7, 0x2F,
0xFF, 0xF4, 0x2F, 0xFF, 0xF4, 0xEF, 0xFF, 0xF7, 0xEF, 0xFF, 0xF7, 0x28, 0x42, 0xD4, 0x2B, 0xDA,
0xD4, 0xEB, 0xDA, 0xD7, 0xEB, 0xC2, 0xD7, 0x2B, 0xDE, 0xD4, 0x28, 0x5E, 0x14, 0xEF, 0xFF, 0xF7,
0xEF, 0xFF, 0xF7, 0x2F, 0xFF, 0xF4, 0x2F, 0xFF, 0xF4, 0xEF, 0xFF, 0xF7, 0xF0, 0x00, 0x0F, 0x1F,
0xFF, 0xF8, 0x19, 0x99, 0x98, 0x00, 0x00, 0x00,
};

void setup() {
  Serial.begin(9600);
  inputString.reserve(200);
  lcd.begin();
  lcd.setContrast(0x10);
  lcd.clearDisplay();
  lcd.drawBitmap(0,0,_logo,128,64,black,white);
  lcd.setTextColor(black, white);
  lcd.display();
  delay(3000);
  lcd.clearDisplay();
}

void loop() {
  if (stringComplete) {
    lcd.drawBitmap(0,0,_cpu,24,24,black,white);
    lcd.setCursor(32, 2);
    lcd.print("TEMP: ");
    lcd.setCursor(32, 14);
    lcd.print("LOAD: ");
    lcd.drawBitmap(3,30,_gpu,16,16,black,white);
    lcd.drawBitmap(70,26,_ram,24,24,black,white);
    lcd.setCursor(112, 39);
    lcd.print("MB");
    lcd.setCursor(3, 53);
    lcd.print("Do/Up:");
    
    lcd.setCursor(64, 2);
    lcd.print((String)cpuTemp + " *C  ");
    lcd.setCursor(64, 14);
    lcd.print((String)cpuLoad + " %  ");
    lcd.setCursor(25, 30);
    lcd.print((String)gpuLoad + " %  ");
    lcd.setCursor(25, 39);
    lcd.print((String)gpuRam + " MB ");
    lcd.setCursor(100, 30);
    lcd.print((String)Ram);
    lcd.setCursor(43, 53);
    lcd.print(Nw + " Mb   ");
    lcd.display();
    inputString = "";
    stringComplete = false;
  }
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    if (inChar == '*') {
      ind1 = inputString.indexOf(',');
      cpuTemp = inputString.substring(0, ind1);
      ind2 = inputString.indexOf(',', ind1+1 );
      cpuLoad = inputString.substring(ind1+1, ind2);
      ind3 = inputString.indexOf(',', ind2+1 );
      gpuLoad = inputString.substring(ind2+1, ind3);
      ind4 = inputString.indexOf(',', ind3+1 );
      gpuRam = inputString.substring(ind3+1, ind4);
      ind5 = inputString.indexOf(',', ind4+1 );
      Ram = inputString.substring(ind4+1, ind5);
      Nw = inputString.substring(ind5+1);
      
      stringComplete = true;
    }  
    else {
      if (inChar == '?') {
        lcd.clearDisplay();
        stringComplete = true;
      }
      else
      {
        inputString += inChar;
      }
    }
  }
}


